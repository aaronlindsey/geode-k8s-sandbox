# TODO
# - Health checks (liveness/readiness)
#   - Use GFSH status locator/server command
#   - Status "Online" means that redundancy recovery and restore from disk have completed
# - Multiple locators for HA
# - Pod affinity
# - Service discovery
# - Ingress
apiVersion: v1
kind: Service
metadata:
  name: geode
spec:
  ports:
  - port: 10334
    name: locator
  - port: 1099
    name: jmx
  - port: 40404
    name: cacheserver
  clusterIP: None
  selector:
    app: geode
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: geode
spec:
  serviceName: geode
  replicas: 3
  selector:
    matchLabels:
      app: geode
  template:
    metadata:
      labels:
        app: geode
    spec:
      containers:
      - name: geode
        image: apachegeode/geode:1.10.0
        command:
        - bash
        - /config/init.sh
        volumeMounts:
        - name: config
          mountPath: /config
      volumes:
      - name: config
        configMap:
          name: geode-init
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: geode-init
data:
  init.sh: |
    #!/bin/bash

    LOCATOR_HOST=geode-0.geode
    LOCATOR_PORT=10334
    SERVER_PORT=40404

    wait_for_dns() {
      # Need to wait for the readiness health check to pass so that the
      # DNS names resolve. This is kind of wonky.
      until ping -c 1 ${HOSTNAME}.geode > /dev/null 2>&1; do
        echo "Waiting for DNS (${HOSTNAME}.geode)..."
        sleep 2
      done
    }

    wait_for_locator() {
      until /geode/bin/gfsh -e "connect --locator=${LOCATOR_HOST}[${LOCATOR_PORT}]" > /dev/null 2>&1; do
        echo "Waiting for locator..."
        sleep 2
      done
    }

    run_locator() {
      java \
        -server \
        -classpath "/geode/lib/geode-core-1.10.0.jar:/geode/lib/geode-dependencies.jar" \
        -Dgemfire.jmx-manager-hostname-for-clients=${LOCATOR_HOST} \
        -Dgemfire.enable-cluster-configuration=true \
        -Dgemfire.load-cluster-configuration-from-dir=false \
        -Dgemfire.launcher.registerSignalHandlers=true \
        -Djava.awt.headless=true \
        -Dsun.rmi.dgc.server.gcInterval=9223372036854775806 \
        org.apache.geode.distributed.LocatorLauncher start locator --port=${LOCATOR_PORT}
    }

    run_server() {
      java \
        -server \
        -classpath "/geode/lib/geode-core-1.10.0.jar:/geode/lib/geode-dependencies.jar" \
        -Dgemfire.default.locators=${LOCATOR_HOST}[${LOCATOR_PORT}] \
        -Dgemfire.start-dev-rest-api=false \
        -Dgemfire.use-cluster-configuration=true \
        -Dgemfire.launcher.registerSignalHandlers=true \
        -Djava.awt.headless=true \
        -Dsun.rmi.dgc.server.gcInterval=9223372036854775806 \
        org.apache.geode.distributed.ServerLauncher start server-${HOSTNAME##*-} --server-port=${SERVER_PORT}
    }

    wait_for_dns
    if [[ "${HOSTNAME}" == 'geode-0' ]]; then
      run_locator
    else
      wait_for_locator
      run_server
    fi

